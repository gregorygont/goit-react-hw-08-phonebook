{"version":3,"file":"static/js/885.26176ef4.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/stack/v-stack.tsx","../node_modules/@chakra-ui/media-query/src/use-breakpoint.ts","../node_modules/@chakra-ui/media-query/src/use-media-query.ts","../node_modules/@chakra-ui/media-query/src/use-breakpoint-value.ts","../node_modules/@chakra-ui/media-query/src/media-query.utils.ts","pages/AuthNavPage/AuthNavPage.jsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/button/src/button-context.ts","../node_modules/@chakra-ui/button/src/button-icon.tsx","../node_modules/@chakra-ui/button/src/button-spinner.tsx","../node_modules/@chakra-ui/button/src/button.tsx","../node_modules/@chakra-ui/button/src/use-button-type.tsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/layout/src/flex.tsx","../node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs","../node_modules/@chakra-ui/react-use-merge-refs/src/index.ts"],"sourcesContent":["import { forwardRef } from \"@chakra-ui/system\"\n\nimport { Stack, StackProps } from \"./stack\"\n\n/**\n * A view that arranges its children in a vertical line.\n *\n * @see Docs https://chakra-ui.com/docs/components/stack\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nVStack.displayName = \"VStack\"\n","import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useMediaQuery } from \"./use-media-query\"\n\nexport type UseBreakpointOptions = {\n  ssr?: boolean\n  fallback?: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent.\n */\nexport function useBreakpoint(arg?: string | UseBreakpointOptions) {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const theme = useTheme()\n\n  const breakpoints = theme.__breakpoints!.details.map(\n    ({ minMaxQuery, breakpoint }) => ({\n      breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\"),\n    }),\n  )\n\n  const fallback = breakpoints.map((bp) => bp.breakpoint === opts.fallback)\n  const values = useMediaQuery(\n    breakpoints.map((bp) => bp.query),\n    { fallback, ssr: opts.ssr },\n  )\n\n  const index = values.findIndex((value) => value == true)\n  return breakpoints[index]?.breakpoint ?? opts.fallback\n}\n","import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useEffect, useState } from \"react\"\n\nexport type UseMediaQueryOptions = {\n  fallback?: boolean | boolean[]\n  ssr?: boolean\n}\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n * @param options the media query options { fallback, ssr }\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-media-query\n */\nexport function useMediaQuery(\n  query: string | string[],\n  options: UseMediaQueryOptions = {},\n): boolean[] {\n  const { ssr = true, fallback } = options\n\n  const { getWindow } = useEnvironment()\n\n  const queries = Array.isArray(query) ? query : [query]\n\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback]\n  fallbackValues = fallbackValues.filter((v) => v != null) as boolean[]\n\n  const [value, setValue] = useState(() => {\n    return queries.map((query, index) => ({\n      media: query,\n      matches: ssr\n        ? !!fallbackValues[index]\n        : getWindow().matchMedia(query).matches,\n    }))\n  })\n\n  useEffect(() => {\n    const win = getWindow()\n    setValue(\n      queries.map((query) => ({\n        media: query,\n        matches: win.matchMedia(query).matches,\n      })),\n    )\n\n    const mql = queries.map((query) => win.matchMedia(query))\n\n    const handler = (evt: MediaQueryListEvent) => {\n      setValue((prev) => {\n        return prev.slice().map((item) => {\n          if (item.media === evt.media) return { ...item, matches: evt.matches }\n          return item\n        })\n      })\n    }\n\n    mql.forEach((mql) => {\n      if (typeof mql.addListener === \"function\") {\n        mql.addListener(handler)\n      } else {\n        mql.addEventListener(\"change\", handler)\n      }\n    })\n\n    return () => {\n      mql.forEach((mql) => {\n        if (typeof mql.removeListener === \"function\") {\n          mql.removeListener(handler)\n        } else {\n          mql.removeEventListener(\"change\", handler)\n        }\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getWindow])\n\n  return value.map((item) => item.matches)\n}\n","import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint, UseBreakpointOptions } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-breakpoint-value\n */\nexport function useBreakpointValue<T = any>(\n  values: Partial<Record<string, T>> | Array<T | null>,\n  arg?: UseBreakpointOptions | string,\n): T | undefined {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const breakpoint = useBreakpoint(opts)\n  const theme = useTheme()\n\n  if (!breakpoint) return\n\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Array.from(theme.__breakpoints?.keys || [])\n\n  const obj = Array.isArray(values)\n    ? Object.fromEntries<any>(\n        Object.entries(arrayToObjectNotation(values, breakpoints)).map(\n          ([key, value]) => [key, value],\n        ),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n","import { breakpoints as defaultBreakPoints } from \"@chakra-ui/breakpoint-utils\"\n\nexport function getClosestValue<T = any>(\n  values: Record<string, T>,\n  breakpoint: string,\n  breakpoints = defaultBreakPoints,\n) {\n  let index = Object.keys(values).indexOf(breakpoint)\n\n  if (index !== -1) {\n    return values[breakpoint]\n  }\n\n  let stopIndex = breakpoints.indexOf(breakpoint)\n\n  while (stopIndex >= 0) {\n    const key = breakpoints[stopIndex]\n\n    if (values.hasOwnProperty(key)) {\n      index = stopIndex\n      break\n    }\n    stopIndex -= 1\n  }\n\n  if (index !== -1) {\n    const key = breakpoints[index]\n    return values[key]\n  }\n\n  return undefined\n}\n","import { NavLink } from 'react-router-dom';\n\nimport {\n  Stack,\n  Flex,\n  Button,\n  Text,\n  VStack,\n  useBreakpointValue,\n} from '@chakra-ui/react';\n\nimport Image from '../../image/macbook.jpg';\n\nconst WithBackgroundImage = () => {\n  return (\n    <Flex\n      w={'full'}\n      h={'100vh'}\n      backgroundImage={`url(${Image})`}\n      backgroundSize={'cover'}\n      backgroundPosition={'center center'}\n    >\n      <VStack\n        w={'full'}\n        justify={'center'}\n        px={useBreakpointValue({ base: 4, md: 8 })}\n        bgGradient={'linear(to-r, blackAlpha.600, transparent)'}\n      >\n        <Stack maxW={'2xl'} align={'flex-start'} spacing={6}>\n          <Text\n            color={'white'}\n            fontWeight={700}\n            lineHeight={1.2}\n            fontSize={useBreakpointValue({ base: '3xl', md: '4xl' })}\n          >\n            Welcome to the phonebook. To take advantage of all the features,\n            register or login.\n          </Text>\n          <Stack direction={'row'}>\n            <Button\n              as={NavLink}\n              to=\"register\"\n              bg={'blue.400'}\n              rounded={'full'}\n              color={'white'}\n              _hover={{ bg: 'blue.500' }}\n            >\n              Sing up\n            </Button>\n            <Button\n              as={NavLink}\n              to=\"login\"\n              bg={'whatsapp.300'}\n              rounded={'full'}\n              color={'white'}\n              _hover={{ bg: 'whatsapp.500' }}\n            >\n              Login\n            </Button>\n          </Stack>\n        </Stack>\n      </VStack>\n    </Flex>\n  );\n};\n\nexport default WithBackgroundImage;\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n","import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n"],"names":["ref","VStack","Stack","align","props","forwardRef","direction","displayName","arg","opts","fallback","theme","breakpoints","useBreakpoint","__breakpoints","map","isObject","minMaxQuery","breakpoint","query","replace","bp","values","useMediaQuery","ssr","index","options","getWindow","useEnvironment","queries","Array","isArray","fallbackValues","filter","v","useState","media","matches","matchMedia","value","setValue","win","useEffect","mql","handler","evt","prev","slice","item","forEach","addListener","addEventListener","removeListener","removeEventListener","useTheme","findIndex","_b","useBreakpointValue","arrayToObjectNotation","from","_a","keys","obj","defaultBreakPoints","Object","indexOf","stopIndex","key","hasOwnProperty","fromEntries","entries","w","h","backgroundImage","Image","backgroundSize","backgroundPosition","justify","px","base","md","bgGradient","maxW","spacing","color","fontWeight","lineHeight","fontSize","as","NavLink","to","bg","rounded","_hover","freeze","mapResponsive","prop","mapper","reduce","result","bps","createContext","strict","name","useButtonGroup","children","className","rest","_children","focusable","isValidElement","cloneElement","_className","span","cx","ButtonIcon","chakra","alignSelf","flexShrink","label","placement","ButtonSpinner","Spinner","width","height","__css","marginProp","spinnerStyles","display","useMemo","alignItems","position","div","styles","dataAttr","isDisabled","isLoading","isActive","Fragment","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","buttonStyles","_focus","zIndex","appearance","justifyContent","userSelect","whiteSpace","verticalAlign","outline","useButtonType","_ref","defaultType","contentProps","isButton","setIsButton","useCallback","node","tagName","useMergeRefs","button","disabled","useStyleConfig","Button","jsx","group","omitThemingProps","opacity","marginStart","marginEnd","textAlign","decoration","casing","aliasedProps","textDecoration","compact","textTransform","p","Text","wrap","basis","grow","shrink","flexDirection","flexWrap","flexBasis","flexGrow","Flex","StackItem","flex","minWidth","isInline","directionProp","divider","shouldWrapChildren","dividerStyle","getDividerStyles","hasDivider","shouldUseChildren","dividerStyles","column","my","mx","borderLeftWidth","borderBottomWidth","row","clones","validChildren","child","isLast","length","wrappedChild","clonedDivider","getValidChildren","_divider","jsxs","gap","object","clone","assign","Children","assignRef","current","error","Error","mergeRefs","refs"],"sourceRoot":""}