Index.JS

Цей код використовує бібліотеку React для створення інтерфейсу веб-сторінки і відображення компонента App в кореневому
DOM-елементі з ідентифікатором 'root'. Давайте розглянемо його крок за кроком:
const container = document.getElementById('root'); Цей рядок отримує посилання на DOM-елемент з ідентифікатором 'root',
який ви визначили в HTML-розмітці веб-сторінки.
const root = createRoot(container); За допомогою функції createRoot, ви створюєте корінь React, який буде використовуватися
для відображення компонентів в заданому контейнері.
root.render(...): За допомогою методу render, ви відображаєте JSX-структуру, яка міститься всередині React.StrictMode.
Ось що ця структура включає:
<Provider store={store}>: Цей компонент використовується для надання Redux-зберігання (store) всім дочірнім компонентам.
 Це означає, що всі компоненти дерева можуть отримувати доступ до стану Redux і диспетчера дій.
<PersistGate loading={null} persistor={persistor}>: Цей компонент використовується для роботи з пакетом redux-persist,
який дозволяє зберігати стан Redux в локальному сховищі. loading={null} означає, що відсутній спеціальний компонент завантаження.
<BrowserRouter basename="/goit-react-hw-08-phonebook">: Цей компонент використовується для встановлення маршрутизації в додатку
і вказує базовий шлях '/goit-react-hw-08-phonebook'. Він дозволяє визначати, який компонент відображати в залежності від URL-шляху.
<App />: Це кореневий компонент вашого додатку. Він буде відображений всередині контейнера з ідентифікатором 'root'.
Отже, цей код створює і налаштовує середовище для вашого React-додатку, надає доступ до Redux-зберігання та маршрутизації,
і відображає кореневий компонент App в DOM-елементі з ідентифікатором 'root'.

App.jsx

Цей код використовує динамічне завантаження модулів (dynamic import) з допомогою функції lazy() та import(). Ця техніка є
частиною специфікації ECMAScript, і вона дозволяє вам завантажувати модулі асинхронно під час виконання програми, що може
покращити продуктивність та швидкість завантаження вашого додатку.
Ось як цей код працює:
const Layout = lazy(() => import('сomponents/Layout/Layout'));: Цей рядок імпортує компонент Layout з модуля
'сomponents/Layout/Layout'. Функція lazy() оточує імпорт і вказує, що цей імпорт повинен бути виконаний асинхронно.
Тобто, модуль 'сomponents/Layout/Layout' буде завантажено, коли він спробує використовуватися вперше.
Аналогічно, решта рядків імпортує інші компоненти (наприклад, AuthNavPage, SignUpPage, SignInPage, ContactsPage) з відповідних
модулів і також використовує функцію lazy() для асинхронного завантаження їх під час виконання програми.
Ця техніка дозволяє вам розділити вашу програму на декілька модулів та завантажувати їх за потребою, що допомагає зменшити
початковий обсяг завантаження додатку. Кожен компонент буде завантажено тільки в тому випадку, якщо він дійсно потрібний для
відображення сторінки або функціональності.

Цей код є частиною фронтенд-додатка на основі бібліотеки React, і він виконує наступні дії:
Компонент App є кореневим компонентом вашого додатка. Він використовується для визначення маршрутів та логіки авторизації.
Ви використовуєте хуки useSelector для отримання значень зі зберігання Redux. Зокрема, ви отримуєте значення token і isLogdedin.
Ви використовуєте хук useLazyGetCurrentUserQuery для виконання асинхронного запиту на отримання інформації про поточного
користувача (fetchUser). Ви запускаєте цей запит, якщо користувач не авторизований (!isLogdedin) і має токен (token).
Параметр skip: !token служить для пропуску запиту, якщо токен відсутній.
У компоненті ви використовуєте розмітку JSX для відображення веб-сторінки. Ви використовуєте компоненти Suspense, ChakraProvider
і Routes для визначення маршрутів вашого додатку.
Ви визначаєте різні маршрути, такі як маршрут для головної сторінки ('/'), маршрути для реєстрації ('/register')
та входу ('/login'), і маршрут для сторінки контактів ('/contacts'). Кожен маршрут вказує на відповідну компоненту,
яка буде відображена, наприклад, <Layout />, <AuthNavPage />, <SignUpPage />, тощо.
Ви використовуєте компоненти PublicRoute та PrivateRoute для визначення доступу до сторінок в залежності від статусу авторизації.
PublicRoute відображається для незареєстрованих користувачів, а PrivateRoute - для авторизованих користувачів.
Компонент ToastContainer використовується для відображення повідомлень (спливаючих повідомлень) користувачеві. Цей компонент
використовує бібліотеку для красивого відображення сповіщень на екрані.
В цілому, цей код представляє собою основну структуру фронтенд-додатка на React з маршрутизацією, авторизацією,
і відображенням різних компонентів на основі умов та стану додатку.
