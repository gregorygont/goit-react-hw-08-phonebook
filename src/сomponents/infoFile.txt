Navigation.jsx

Цей код визначає компонент Navigation, який відповідає за створення навігаційного посилання у вашому React-додатку.
Давайте розглянемо, що робить цей код:
Ви імпортуєте необхідні модулі:
React імпортується для створення React-компонента.
NavLink імпортується з react-router-dom, що дозволить вам створити посилання для маршрутизації в вашому додатку.
Компонент Navigation визначений як функціональний компонент, який повертає JSX-розмітку.
У розмітці ви маєте елемент <nav>, який представляє собою контейнер для навігаційних елементів вашої сторінки.
У середині <nav> ви використовуєте компонент NavLink. NavLink створює посилання на маршрут contacts. Коли користувач клікає
на це посилання, він буде перенаправлений на сторінку, яка відповідає маршруту contacts. Крім того, NavLink надає стилі
для активного посилання, якщо ви захочете виділити активний маршрут на вашому веб-сайті.
Отже, цей компонент Navigation створює навігаційне посилання на сторінку "Контакти" у вашому додатку, що допомагає
користувачеві переходити на цю сторінку при необхідності.


UserMenu.jsx

Цей код визначає компонент UserMenu, який є частиною фронтенд-додатка на React. Його основна функція полягає у
відображенні інформації про користувача та можливості вийти з облікового запису.
Давайте розглянемо, що робить цей код:
Ви імпортуєте необхідні модулі та функції:
React імпортується для створення React-компонента.
useSelector і useUserLogoutMutation імпортуються з бібліотеки Redux та API для управління обліковим записом користувача.
getUserName імпортується зі зберігання Redux та використовується для отримання імені користувача.
Box, Flex, Text, і Button імпортуються з бібліотеки Chakra UI, яка використовується для створення інтерфейсу користувача.
Компонент UserMenu визначений як функціональний компонент, який повертає JSX-розмітку.

У розмітці ви маєте наступні елементи:
<Flex> використовується для створення горизонтального контейнера з вирівнюванням по центру і простором між елементами.
<Text> відображає привітання з іменем користувача, отриманим зі зберігання Redux.
<Button> створює кнопку "LogOut", і при кліку на неї викликається функція userLogout.
useSelector(getUserName) використовується для отримання імені користувача зі зберігання Redux. Значення name зберігається в
змінній name для використання у розмітці.
useUserLogoutMutation() створює функцію userLogout, яка викликається при натисканні на кнопку "LogOut". Ця функція,
виконує дії, пов'язані з виходом користувача з облікового запису (наприклад, видаляє токен аутентифікації, очищає сесію тощо).
Отже, цей компонент UserMenu відображає привітання з іменем користувача та кнопку для виходу з облікового запису.

AppBar.jsx

Цей код визначає компонент AppBar, який представляє собою верхню частину інтерфейсу вашого React-додатка.
Давайте розглянемо, що робить цей код:
Ви імпортуєте необхідні модулі та компоненти:
React імпортується для створення React-компонента.
Navigation і UserMenu імпортуються з відповідних файлів і відповідають за навігацію та інтерфейс користувача.
Box, Flex, і useColorModeValue імпортуються з бібліотеки Chakra UI для створення і стилізації інтерфейсу.
Компонент AppBar визначений як функціональний компонент, який повертає JSX-розмітку.
У розмітці ви маєте наступні елементи:
<Box> створює контейнер верхньої частини вашого додатка. Колір фону цього контейнера залежить від поточного режиму кольорової
теми (світлої або темної), який визначається функцією useColorModeValue.
<Flex> використовується для створення горизонтального контейнера з вирівнюванням по центру і простором між елементами.
У <Flex> ви вставляєте два компоненти: Navigation і UserMenu, які будуть відображені в верхній частині вашого додатка.
Компонент Navigation відповідає за навігацію в додатку, і він відображається вліво від UserMenu.
Компонент UserMenu відповідає за інтерфейс користувача та можливість вийти з облікового запису. Він відображається вправо від
Navigation.
Отже, цей компонент AppBar створює верхню частину інтерфейсу вашого додатка з навігаційним меню та інтерфейсом користувача.

ContactForm.jsx

Хуки useState і useEffect імпортуються з бібліотеки React і використовуються для створення та взаємодії зі станами та
ефектами компонентів.
useAddContactsMutation і useGetContactQuery імпортуються з redux/api/ContactsApi. Ці хуки використовуються для виконання
запитів до сервера, зокрема, для додавання нового контакту (useAddContactsMutation) і отримання інформації
про контакти (useGetContactQuery).
toast імпортується з бібліотеки react-toastify. Ця бібліотека використовується для відображення спливаючих повідомлень
або сповіщень у вашому додатку.
Stack, Input, і Button імпортуються з бібліотеки Chakra UI і використовуються для створення і стилізації інтерфейсу введення
даних та кнопок.

Давайте розглянемо, що робить цей код:
Компонент використовує різні хуки та стани для роботи з функціоналом додавання контактів:
useAddContactsMutation імпортується для виклику функції addContacts, яка, відправляє запит на додавання нового контакту.
useGetContactQuery імпортується для отримання списку контактів.
useState використовується для створення станів name, number і nameForToast для відстеження значень введених даних та
відображення сповіщень.
За допомогою useEffect, ви відслідковуєте статус успішності (isSuccess) та помилки (error) після виконання запиту
на додавання контакту. Якщо додавання контакту було успішним (isSuccess), то виводиться сповіщення про успішне додавання
контакту. У вас також є обробник помилок (error), який виводить сповіщення про помилку.
handleInputChange - це обробник подій для введення даних в поля вводу. Він оновлює відповідний стан (наприклад, name або number)
згідно зі змінами введених даних.
handleSubmit - це обробник подій для відправлення форми. Він перевіряє, чи ім'я контакту вже існує в списку контактів (data) і
додає новий контакт за допомогою addContacts. Після додавання контакту дані очищаються, і виводиться відповідне сповіщення.
У розмітці ви маєте форму з двома полями введення для імені та номера контакту, а також кнопку "Add Contact". Поля введення
мають валідацію за допомогою атрибутів pattern і title, і вони вимагають обов'язкового введення (required).
Кнопка "Add Contact" активується, коли обидва поля заповнені (disabled={number && name ? false : true}).
Під час надсилання форми, коли триває процес додавання контакту (isLoading), кнопка відображає "Add Contact...Spiner"
для відображення процесу завантаження. В іншому випадку вона відображає "Add Contact".
Отже, цей компонент ContactForm дозволяє користувачеві додавати нові контакти до списку контактів і відображає відповідні
сповіщення під час успішного або неуспішного додавання.
